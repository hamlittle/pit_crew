
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000046c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000714  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad5  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000037c  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000880  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000454  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	0e 94 ca 01 	call	0x394	; 0x394 <main>
 210:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
 218:	0f 93       	push	r16
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 224:	2f b7       	in	r18, 0x3f	; 63
 226:	29 83       	std	Y+1, r18	; 0x01
 228:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 22a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 22c:	fc 01       	movw	r30, r24
 22e:	08 ed       	ldi	r16, 0xD8	; 216
 230:	04 bf       	out	0x34, r16	; 52
 232:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	8f bf       	out	0x3f, r24	; 63
#endif
}
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
 242:	61 11       	cpse	r22, r1
 244:	06 c0       	rjmp	.+12     	; 0x252 <CLKSYS_XOSC_Config+0x10>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	84 2b       	or	r24, r20
 24a:	89 2b       	or	r24, r25
 24c:	80 93 52 00 	sts	0x0052, r24
 250:	08 95       	ret
 252:	90 e2       	ldi	r25, 0x20	; 32
 254:	84 2b       	or	r24, r20
 256:	89 2b       	or	r24, r25
 258:	80 93 52 00 	sts	0x0052, r24
 25c:	08 95       	ret

0000025e <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
 25e:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 260:	68 2b       	or	r22, r24
 262:	e0 e5       	ldi	r30, 0x50	; 80
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	65 83       	std	Z+5, r22	; 0x05
 268:	08 95       	ret

0000026a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
 26a:	e0 e5       	ldi	r30, 0x50	; 80
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	20 81       	ld	r18, Z
 270:	98 2f       	mov	r25, r24
 272:	90 95       	com	r25
 274:	92 23       	and	r25, r18
 276:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
 278:	90 81       	ld	r25, Z
	return clkEnabled;
}
 27a:	89 23       	and	r24, r25
 27c:	08 95       	ret

0000027e <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
 27e:	0f 93       	push	r16
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	1f 92       	push	r1
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 28a:	9f b7       	in	r25, 0x3f	; 63
 28c:	99 83       	std	Y+1, r25	; 0x01
 28e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 290:	1b be       	out	0x3b, r1	; 59
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
 292:	68 2b       	or	r22, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	08 ed       	ldi	r16, 0xD8	; 216
 29c:	04 bf       	out	0x34, r16	; 52
 29e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
 2ae:	0f 93       	push	r16
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 2ba:	a0 e4       	ldi	r26, 0x40	; 64
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	9c 91       	ld	r25, X

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 2c0:	2f b7       	in	r18, 0x3f	; 63
 2c2:	29 83       	std	Y+1, r18	; 0x01
 2c4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 2c6:	1b be       	out	0x3b, r1	; 59
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 2c8:	98 7f       	andi	r25, 0xF8	; 248
 2ca:	98 2b       	or	r25, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
 2cc:	20 e4       	ldi	r18, 0x40	; 64
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	08 ed       	ldi	r16, 0xD8	; 216
 2d4:	04 bf       	out	0x34, r16	; 52
 2d6:	90 83       	st	Z, r25
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 2d8:	99 81       	ldd	r25, Y+1	; 0x01
 2da:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
 2dc:	9c 91       	ld	r25, X
	return clkCtrl;
}
 2de:	89 23       	and	r24, r25
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 2ea:	e0 e4       	ldi	r30, 0x40	; 64
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	93 81       	ldd	r25, Z+3	; 0x03
 2f0:	91 7f       	andi	r25, 0xF1	; 241
 2f2:	91 60       	ori	r25, 0x01	; 1
 2f4:	98 2b       	or	r25, r24
 2f6:	93 83       	std	Z+3, r25	; 0x03
 2f8:	08 95       	ret

000002fa <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 2fa:	30 91 56 00 	lds	r19, 0x0056
 2fe:	28 2f       	mov	r18, r24
 300:	98 2f       	mov	r25, r24
 302:	90 95       	com	r25
 304:	93 23       	and	r25, r19
 306:	61 11       	cpse	r22, r1
 308:	01 c0       	rjmp	.+2      	; 0x30c <CLKSYS_AutoCalibration_Enable+0x12>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	92 2b       	or	r25, r18
 30e:	90 93 56 00 	sts	0x0056, r25
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	49 f0       	breq	.+18     	; 0x328 <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
	} else if (clkSource == OSC_RC32MCREF_bm) {
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	09 f0       	breq	.+2      	; 0x31c <CLKSYS_AutoCalibration_Enable+0x22>
 31a:	08 95       	ret
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 31c:	80 91 60 00 	lds	r24, 0x0060
 320:	81 60       	ori	r24, 0x01	; 1
 322:	80 93 60 00 	sts	0x0060, r24
 326:	08 95       	ret
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 328:	80 91 68 00 	lds	r24, 0x0068
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 93 68 00 	sts	0x0068, r24
 332:	08 95       	ret

00000334 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
 334:	0f 93       	push	r16
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	1f 92       	push	r1
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 340:	8f b7       	in	r24, 0x3f	; 63
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 346:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 348:	23 e0       	ldi	r18, 0x03	; 3
 34a:	83 e5       	ldi	r24, 0x53	; 83
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	08 ed       	ldi	r16, 0xD8	; 216
 352:	04 bf       	out	0x34, r16	; 52
 354:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
 364:	0f 93       	push	r16
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 370:	8f b7       	in	r24, 0x3f	; 63
 372:	89 83       	std	Y+1, r24	; 0x01
 374:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 376:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	82 e4       	ldi	r24, 0x42	; 66
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	08 ed       	ldi	r16, 0xD8	; 216
 382:	04 bf       	out	0x34, r16	; 52
 384:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	0f 91       	pop	r16
 392:	08 95       	ret

00000394 <main>:
#include "../clksys_driver.h"

int main(void)
{
   // Configure switches
   PORTCFG.MPCMASK = 0xFF; // Configure several PINxCTRL registers at the same time
 394:	9f ef       	ldi	r25, 0xFF	; 255
 396:	90 93 b0 00 	sts	0x00B0, r25
   SWITCHPORTL.PIN0CTRL = (SWITCHPORTL.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;
 39a:	80 91 70 06 	lds	r24, 0x0670
 39e:	87 7c       	andi	r24, 0xC7	; 199
 3a0:	88 61       	ori	r24, 0x18	; 24
 3a2:	80 93 70 06 	sts	0x0670, r24
   //Enable pull-up to get a defined level on the switches

   SWITCHPORTL.DIRCLR = 0xFF; // Set port as input
 3a6:	90 93 62 06 	sts	0x0662, r25

   // Configure LEDs
   PORTCFG.MPCMASK = 0xFF; // Configure several PINxCTRL registers at the same time
 3aa:	90 93 b0 00 	sts	0x00B0, r25
   LEDPORT.PIN0CTRL = PORT_INVEN_bm; // Invert input to turn the leds on when port output value is 1
 3ae:	80 e4       	ldi	r24, 0x40	; 64
 3b0:	80 93 90 06 	sts	0x0690, r24

   LEDPORT.DIRSET = 0xFF; 	// Set port as output
 3b4:	90 93 81 06 	sts	0x0681, r25
   LEDPORT.OUT = 0xA1;  // Set initial value
 3b8:	81 ea       	ldi	r24, 0xA1	; 161
 3ba:	80 93 84 06 	sts	0x0684, r24
         CLKSYS_Enable( OSC_RC2MEN_bm );
         do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
         CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm );

         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
 3be:	17 e0       	ldi	r17, 0x07	; 7
         LEDPORT.OUTSET = PIN0_bm;
 3c0:	ee 24       	eor	r14, r14
 3c2:	e3 94       	inc	r14
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
         CLKSYS_Disable( OSC_RC2MEN_bm | OSC_RC32KEN_bm );


         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
         LEDPORT.OUTSET = PIN1_bm;
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	f8 2e       	mov	r15, r24
         do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32K_gc );
         CLKSYS_Disable( OSC_RC2MEN_bm | OSC_RC32MEN_bm );

         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
         LEDPORT.OUTSET = PIN2_bm;
 3c8:	04 e0       	ldi	r16, 0x04	; 4
      // Blink LEDS after the loop has been run several times
      // This gives us visual feedback on the MCU speed
      counter++;
      if (counter > 20000 )
      {
         LEDPORT.OUTTGL = 0xF0;
 3ca:	90 ef       	ldi	r25, 0xF0	; 240
 3cc:	d9 2e       	mov	r13, r25

// Include Clock system driver from application note AVR1003
#include "../clksys_driver.h"

int main(void)
{
 3ce:	c1 e2       	ldi	r28, 0x21	; 33
 3d0:	de e4       	ldi	r29, 0x4E	; 78

      /*  Enable internal 2 MHz rc oscillator and wait until it's
       *  stable. Set the 2 MHz rc oscillator as the main clock source.
       *  Then disable other oscillators.
       */
      if ( (SWITCHPORTL.IN & PIN0_bm) == 0 )
 3d2:	80 91 68 06 	lds	r24, 0x0668
 3d6:	80 fd       	sbrc	r24, 0
 3d8:	13 c0       	rjmp	.+38     	; 0x400 <main+0x6c>
      {
         CLKSYS_Enable( OSC_RC2MEN_bm );
 3da:	80 91 50 00 	lds	r24, 0x0050
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	80 93 50 00 	sts	0x0050, r24
         do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
 3e4:	80 91 51 00 	lds	r24, 0x0051
 3e8:	80 ff       	sbrs	r24, 0
 3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <main+0x50>
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 57 01 	call	0x2ae	; 0x2ae <CLKSYS_Main_ClockSource_Select>
         CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm );
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	0e 94 35 01 	call	0x26a	; 0x26a <CLKSYS_Disable>

         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
 3f8:	10 93 86 06 	sts	0x0686, r17
         LEDPORT.OUTSET = PIN0_bm;
 3fc:	e0 92 85 06 	sts	0x0685, r14

      /*  Enable internal 32 MHz ring oscillator and wait until it's
       *  stable. Set the 32 MHz ring oscillator as the main clock source.
       *  Then disable the other oscillators.
       */
      if ( (SWITCHPORTL.IN & PIN1_bm) == 0 )
 400:	80 91 68 06 	lds	r24, 0x0668
 404:	81 fd       	sbrc	r24, 1
 406:	13 c0       	rjmp	.+38     	; 0x42e <main+0x9a>
      {
         CLKSYS_Enable( OSC_RC32MEN_bm );
 408:	80 91 50 00 	lds	r24, 0x0050
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	80 93 50 00 	sts	0x0050, r24
         do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
 412:	80 91 51 00 	lds	r24, 0x0051
 416:	81 ff       	sbrs	r24, 1
 418:	fc cf       	rjmp	.-8      	; 0x412 <main+0x7e>
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 57 01 	call	0x2ae	; 0x2ae <CLKSYS_Main_ClockSource_Select>
         CLKSYS_Disable( OSC_RC2MEN_bm | OSC_RC32KEN_bm );
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	0e 94 35 01 	call	0x26a	; 0x26a <CLKSYS_Disable>


         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
 426:	10 93 86 06 	sts	0x0686, r17
         LEDPORT.OUTSET = PIN1_bm;
 42a:	f0 92 85 06 	sts	0x0685, r15

      /*  Enable internal 32 kHz calibrated oscillator and check for
       *  it to be stable. Set the 32 kHz oscillator as the main clock source.
       *  Then disable the other oscillators.
       */
      if ( (SWITCHPORTL.IN & PIN2_bm) == 0 )
 42e:	80 91 68 06 	lds	r24, 0x0668
 432:	82 fd       	sbrc	r24, 2
 434:	13 c0       	rjmp	.+38     	; 0x45c <main+0xc8>
      {
         CLKSYS_Enable( OSC_RC32KEN_bm );
 436:	80 91 50 00 	lds	r24, 0x0050
 43a:	84 60       	ori	r24, 0x04	; 4
 43c:	80 93 50 00 	sts	0x0050, r24
         do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );
 440:	80 91 51 00 	lds	r24, 0x0051
 444:	82 ff       	sbrs	r24, 2
 446:	fc cf       	rjmp	.-8      	; 0x440 <main+0xac>
         CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32K_gc );
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 57 01 	call	0x2ae	; 0x2ae <CLKSYS_Main_ClockSource_Select>
         CLKSYS_Disable( OSC_RC2MEN_bm | OSC_RC32MEN_bm );
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	0e 94 35 01 	call	0x26a	; 0x26a <CLKSYS_Disable>

         LEDPORT.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm;
 454:	10 93 86 06 	sts	0x0686, r17
         LEDPORT.OUTSET = PIN2_bm;
 458:	00 93 85 06 	sts	0x0685, r16
 45c:	21 97       	sbiw	r28, 0x01	; 1
      }

      // Blink LEDS after the loop has been run several times
      // This gives us visual feedback on the MCU speed
      counter++;
      if (counter > 20000 )
 45e:	09 f0       	breq	.+2      	; 0x462 <main+0xce>
 460:	b8 cf       	rjmp	.-144    	; 0x3d2 <main+0x3e>
      {
         LEDPORT.OUTTGL = 0xF0;
 462:	d0 92 87 06 	sts	0x0687, r13
 466:	b3 cf       	rjmp	.-154    	; 0x3ce <main+0x3a>

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
