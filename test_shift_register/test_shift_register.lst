
test_shift_register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000037e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000714  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b9f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004ec  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b0  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018f  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000323  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59
 20c:	0e 94 8c 01 	call	0x318	; 0x318 <main>
 210:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <setup>:
   setup_signal_pin();
   setup_switches();
}

void setup_leds(void) {
   LEDPORT.DIR = 0xff;                 // set all pins of port E to output
 218:	e0 e8       	ldi	r30, 0x80	; 128
 21a:	f6 e0       	ldi	r31, 0x06	; 6
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	80 83       	st	Z, r24
   PORTCFG.MPCMASK = 0xff;             // set for all pins on port E...
 220:	80 93 b0 00 	sts	0x00B0, r24
   LEDPORT.PIN0CTRL |= PORT_INVEN_bm;  // inverted output (set hi turns on led)
 224:	90 89       	ldd	r25, Z+16	; 0x10
 226:	90 64       	ori	r25, 0x40	; 64
 228:	90 8b       	std	Z+16, r25	; 0x10
   LEDPORT.OUTCLR = 0xff;              // turn all leds off
 22a:	86 83       	std	Z+6, r24	; 0x06
}

void setup_SR_pins(void) {
   SR_PORT.DIR |= SR_PINS_gm; // set SR pins as outputs
 22c:	e0 e6       	ldi	r30, 0x60	; 96
 22e:	f6 e0       	ldi	r31, 0x06	; 6
 230:	90 81       	ld	r25, Z
 232:	97 60       	ori	r25, 0x07	; 7
 234:	90 83       	st	Z, r25
   SR_PORT.OUTCLR = 0xff;     // set to 0 initially
 236:	86 83       	std	Z+6, r24	; 0x06
   return;
}

void setup_signal_pin(void) {
   SIGNAL_PORT.DIR &= ~SIGNAL_PIN_bm; // set the signal pin as an input
 238:	80 81       	ld	r24, Z
 23a:	87 7f       	andi	r24, 0xF7	; 247
 23c:	80 83       	st	Z, r24
   SIGNAL_PORT.SIGPINCTRL |= PORT_OPC_PULLDOWN_gc;
 23e:	83 89       	ldd	r24, Z+19	; 0x13
 240:	80 61       	ori	r24, 0x10	; 16
 242:	83 8b       	std	Z+19, r24	; 0x13
}

void setup_switches(void) {
   SWITCHPORTH.DIR &= ~CYCLE_SWITCH_bm;   // set the switch 7's pin as input
 244:	e0 ee       	ldi	r30, 0xE0	; 224
 246:	f7 e0       	ldi	r31, 0x07	; 7
 248:	80 81       	ld	r24, Z
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 83       	st	Z, r24
   SWITCHPORTH.CHANSELSWCTRL |= PORT_OPC_PULLUP_gc; // hitting sw pulls to gnd
 24e:	81 89       	ldd	r24, Z+17	; 0x11
 250:	88 61       	ori	r24, 0x18	; 24
 252:	81 8b       	std	Z+17, r24	; 0x11
 254:	08 95       	ret

00000256 <setup_leds>:
   setup_signal_pin();
   setup_switches();
}

void setup_leds(void) {
   LEDPORT.DIR = 0xff;                 // set all pins of port E to output
 256:	e0 e8       	ldi	r30, 0x80	; 128
 258:	f6 e0       	ldi	r31, 0x06	; 6
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 83       	st	Z, r24
   PORTCFG.MPCMASK = 0xff;             // set for all pins on port E...
 25e:	80 93 b0 00 	sts	0x00B0, r24
   LEDPORT.PIN0CTRL |= PORT_INVEN_bm;  // inverted output (set hi turns on led)
 262:	90 89       	ldd	r25, Z+16	; 0x10
 264:	90 64       	ori	r25, 0x40	; 64
 266:	90 8b       	std	Z+16, r25	; 0x10
   LEDPORT.OUTCLR = 0xff;              // turn all leds off
 268:	86 83       	std	Z+6, r24	; 0x06
 26a:	08 95       	ret

0000026c <setup_SR_pins>:
}

void setup_SR_pins(void) {
   SR_PORT.DIR |= SR_PINS_gm; // set SR pins as outputs
 26c:	e0 e6       	ldi	r30, 0x60	; 96
 26e:	f6 e0       	ldi	r31, 0x06	; 6
 270:	80 81       	ld	r24, Z
 272:	87 60       	ori	r24, 0x07	; 7
 274:	80 83       	st	Z, r24
   SR_PORT.OUTCLR = 0xff;     // set to 0 initially
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	86 83       	std	Z+6, r24	; 0x06
 27a:	08 95       	ret

0000027c <setup_signal_pin>:
   return;
}

void setup_signal_pin(void) {
   SIGNAL_PORT.DIR &= ~SIGNAL_PIN_bm; // set the signal pin as an input
 27c:	e0 e6       	ldi	r30, 0x60	; 96
 27e:	f6 e0       	ldi	r31, 0x06	; 6
 280:	80 81       	ld	r24, Z
 282:	87 7f       	andi	r24, 0xF7	; 247
 284:	80 83       	st	Z, r24
   SIGNAL_PORT.SIGPINCTRL |= PORT_OPC_PULLDOWN_gc;
 286:	83 89       	ldd	r24, Z+19	; 0x13
 288:	80 61       	ori	r24, 0x10	; 16
 28a:	83 8b       	std	Z+19, r24	; 0x13
 28c:	08 95       	ret

0000028e <setup_switches>:
}

void setup_switches(void) {
   SWITCHPORTH.DIR &= ~CYCLE_SWITCH_bm;   // set the switch 7's pin as input
 28e:	e0 ee       	ldi	r30, 0xE0	; 224
 290:	f7 e0       	ldi	r31, 0x07	; 7
 292:	80 81       	ld	r24, Z
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	80 83       	st	Z, r24
   SWITCHPORTH.CHANSELSWCTRL |= PORT_OPC_PULLUP_gc; // hitting sw pulls to gnd
 298:	81 89       	ldd	r24, Z+17	; 0x11
 29a:	88 61       	ori	r24, 0x18	; 24
 29c:	81 8b       	std	Z+17, r24	; 0x11
 29e:	08 95       	ret

000002a0 <show_channel>:
}


void show_channel(int8_t channel) {
   LEDPORT.OUTCLR = CHANNEL_LEDS_gm;
 2a0:	e0 e8       	ldi	r30, 0x80	; 128
 2a2:	f6 e0       	ldi	r31, 0x06	; 6
 2a4:	9f e0       	ldi	r25, 0x0F	; 15
 2a6:	96 83       	std	Z+6, r25	; 0x06
   LEDPORT.OUTSET = channel;
 2a8:	85 83       	std	Z+5, r24	; 0x05
 2aa:	08 95       	ret

000002ac <set_channel>:
void set_channel(int8_t channel) {
   static int8_t chan_pins = 4;
   int8_t chan_counter;
   int8_t chan_pin_mask = 0x08;

   SR_PORT.OUTCLR = SR_PINS_gm;
 2ac:	97 e0       	ldi	r25, 0x07	; 7
 2ae:	90 93 66 06 	sts	0x0666, r25
 2b2:	99 27       	eor	r25, r25
 2b4:	87 fd       	sbrc	r24, 7
 2b6:	90 95       	com	r25
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0

   for (chan_counter = 0; chan_counter < chan_pins; ++chan_counter) {
      // set order: msb->lsb
      if (channel & (chan_pin_mask >> chan_counter)) {
 2bc:	68 e0       	ldi	r22, 0x08	; 8
 2be:	70 e0       	ldi	r23, 0x00	; 0
         SR_PORT.OUTSET = SR_SER_IN_PIN_bm;
      }
      else {
         SR_PORT.OUTCLR = SR_SER_IN_PIN_bm;
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
      }
      SR_PORT.OUTSET = SR_CLOCK_PIN_bm; // clock high to shift in value
 2c2:	e2 e0       	ldi	r30, 0x02	; 2
 2c4:	0b c0       	rjmp	.+22     	; 0x2dc <set_channel+0x30>
   SR_PORT.OUTCLR = SR_PINS_gm;

   for (chan_counter = 0; chan_counter < chan_pins; ++chan_counter) {
      // set order: msb->lsb
      if (channel & (chan_pin_mask >> chan_counter)) {
         SR_PORT.OUTSET = SR_SER_IN_PIN_bm;
 2c6:	f0 93 65 06 	sts	0x0665, r31
      }
      else {
         SR_PORT.OUTCLR = SR_SER_IN_PIN_bm;
      }
      SR_PORT.OUTSET = SR_CLOCK_PIN_bm; // clock high to shift in value
 2ca:	e0 93 65 06 	sts	0x0665, r30
      SR_PORT.OUTCLR = SR_CLOCK_PIN_bm; // clock low to set next value
 2ce:	e0 93 66 06 	sts	0x0666, r30
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
   int8_t chan_counter;
   int8_t chan_pin_mask = 0x08;

   SR_PORT.OUTCLR = SR_PINS_gm;

   for (chan_counter = 0; chan_counter < chan_pins; ++chan_counter) {
 2d6:	24 30       	cpi	r18, 0x04	; 4
 2d8:	31 05       	cpc	r19, r1
 2da:	71 f0       	breq	.+28     	; 0x2f8 <set_channel+0x4c>
      // set order: msb->lsb
      if (channel & (chan_pin_mask >> chan_counter)) {
 2dc:	ab 01       	movw	r20, r22
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <set_channel+0x3a>
 2e2:	55 95       	asr	r21
 2e4:	47 95       	ror	r20
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <set_channel+0x36>
 2ea:	48 23       	and	r20, r24
 2ec:	59 23       	and	r21, r25
 2ee:	45 2b       	or	r20, r21
 2f0:	51 f7       	brne	.-44     	; 0x2c6 <set_channel+0x1a>
         SR_PORT.OUTSET = SR_SER_IN_PIN_bm;
      }
      else {
         SR_PORT.OUTCLR = SR_SER_IN_PIN_bm;
 2f2:	f0 93 66 06 	sts	0x0666, r31
 2f6:	e9 cf       	rjmp	.-46     	; 0x2ca <set_channel+0x1e>
      }
      SR_PORT.OUTSET = SR_CLOCK_PIN_bm; // clock high to shift in value
      SR_PORT.OUTCLR = SR_CLOCK_PIN_bm; // clock low to set next value
   }

   SR_PORT.OUTSET = SR_L_CLOCK_PIN_bm; // toggle L_CLOCK...
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	80 93 65 06 	sts	0x0665, r24
   SR_PORT.OUTCLR = SR_L_CLOCK_PIN_bm; // to dump the output latch
 2fe:	80 93 66 06 	sts	0x0666, r24
 302:	08 95       	ret

00000304 <show_signal>:
}

void show_signal(uint8_t signal_present) {
   if (signal_present) {
 304:	81 11       	cpse	r24, r1
 306:	04 c0       	rjmp	.+8      	; 0x310 <show_signal+0xc>
      LEDPORT.OUTSET = SIGNAL_LEDS_gm;
   }
   else  {
      LEDPORT.OUTCLR = SIGNAL_LEDS_gm;
 308:	80 ef       	ldi	r24, 0xF0	; 240
 30a:	80 93 86 06 	sts	0x0686, r24
 30e:	08 95       	ret
   SR_PORT.OUTCLR = SR_L_CLOCK_PIN_bm; // to dump the output latch
}

void show_signal(uint8_t signal_present) {
   if (signal_present) {
      LEDPORT.OUTSET = SIGNAL_LEDS_gm;
 310:	80 ef       	ldi	r24, 0xF0	; 240
 312:	80 93 85 06 	sts	0x0685, r24
 316:	08 95       	ret

00000318 <main>:
int main(void) {
   int8_t channel = 0;
   bool pushed = 0;


   setup();
 318:	0e 94 0c 01 	call	0x218	; 0x218 <setup>

   set_channel(0);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_channel>
   }
}

int main(void) {
   int8_t channel = 0;
   bool pushed = 0;
 322:	20 e0       	ldi	r18, 0x00	; 0
      LEDPORT.OUTCLR = SIGNAL_LEDS_gm;
   }
}

int main(void) {
   int8_t channel = 0;
 324:	c0 e0       	ldi	r28, 0x00	; 0
   SWITCHPORTH.CHANSELSWCTRL |= PORT_OPC_PULLUP_gc; // hitting sw pulls to gnd
}


void show_channel(int8_t channel) {
   LEDPORT.OUTCLR = CHANNEL_LEDS_gm;
 326:	0f e0       	ldi	r16, 0x0F	; 15
void show_signal(uint8_t signal_present) {
   if (signal_present) {
      LEDPORT.OUTSET = SIGNAL_LEDS_gm;
   }
   else  {
      LEDPORT.OUTCLR = SIGNAL_LEDS_gm;
 328:	d0 ef       	ldi	r29, 0xF0	; 240
   setup();

   set_channel(0);
   while (1)
   {
      if (!pushed && (SWITCHPORTH.IN & CYCLE_SWITCH_bm) == 0) {
 32a:	80 91 e8 07 	lds	r24, 0x07E8
 32e:	22 23       	and	r18, r18
 330:	61 f0       	breq	.+24     	; 0x34a <main+0x32>
         }
         set_channel(++channel);
         show_channel(channel);
         pushed = 1;
      }
      else if (pushed && (SWITCHPORTH.IN & CYCLE_SWITCH_bm)) {
 332:	81 fd       	sbrc	r24, 1
         pushed = 0;
 334:	20 e0       	ldi	r18, 0x00	; 0
      }
      show_signal(SIGNAL_PORT.IN & SIGNAL_PIN_bm);
 336:	90 91 68 06 	lds	r25, 0x0668
   SR_PORT.OUTSET = SR_L_CLOCK_PIN_bm; // toggle L_CLOCK...
   SR_PORT.OUTCLR = SR_L_CLOCK_PIN_bm; // to dump the output latch
}

void show_signal(uint8_t signal_present) {
   if (signal_present) {
 33a:	93 ff       	sbrs	r25, 3
 33c:	18 c0       	rjmp	.+48     	; 0x36e <main+0x56>
      LEDPORT.OUTSET = SIGNAL_LEDS_gm;
 33e:	d0 93 85 06 	sts	0x0685, r29
   setup();

   set_channel(0);
   while (1)
   {
      if (!pushed && (SWITCHPORTH.IN & CYCLE_SWITCH_bm) == 0) {
 342:	80 91 e8 07 	lds	r24, 0x07E8
 346:	21 11       	cpse	r18, r1
 348:	f4 cf       	rjmp	.-24     	; 0x332 <main+0x1a>
 34a:	81 fd       	sbrc	r24, 1
 34c:	f4 cf       	rjmp	.-24     	; 0x336 <main+0x1e>
         if (channel == 15) {
 34e:	cf 30       	cpi	r28, 0x0F	; 15
 350:	89 f0       	breq	.+34     	; 0x374 <main+0x5c>
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	1c 2f       	mov	r17, r28
            channel = -1;
         }
         set_channel(++channel);
 356:	8c 2f       	mov	r24, r28
 358:	0e 94 56 01 	call	0x2ac	; 0x2ac <set_channel>
   SWITCHPORTH.CHANSELSWCTRL |= PORT_OPC_PULLUP_gc; // hitting sw pulls to gnd
}


void show_channel(int8_t channel) {
   LEDPORT.OUTCLR = CHANNEL_LEDS_gm;
 35c:	00 93 86 06 	sts	0x0686, r16
   LEDPORT.OUTSET = channel;
 360:	10 93 85 06 	sts	0x0685, r17
         if (channel == 15) {
            channel = -1;
         }
         set_channel(++channel);
         show_channel(channel);
         pushed = 1;
 364:	21 e0       	ldi	r18, 0x01	; 1
      }
      else if (pushed && (SWITCHPORTH.IN & CYCLE_SWITCH_bm)) {
         pushed = 0;
      }
      show_signal(SIGNAL_PORT.IN & SIGNAL_PIN_bm);
 366:	90 91 68 06 	lds	r25, 0x0668
   SR_PORT.OUTSET = SR_L_CLOCK_PIN_bm; // toggle L_CLOCK...
   SR_PORT.OUTCLR = SR_L_CLOCK_PIN_bm; // to dump the output latch
}

void show_signal(uint8_t signal_present) {
   if (signal_present) {
 36a:	93 fd       	sbrc	r25, 3
 36c:	e8 cf       	rjmp	.-48     	; 0x33e <main+0x26>
      LEDPORT.OUTSET = SIGNAL_LEDS_gm;
   }
   else  {
      LEDPORT.OUTCLR = SIGNAL_LEDS_gm;
 36e:	d0 93 86 06 	sts	0x0686, r29
 372:	db cf       	rjmp	.-74     	; 0x32a <main+0x12>

   set_channel(0);
   while (1)
   {
      if (!pushed && (SWITCHPORTH.IN & CYCLE_SWITCH_bm) == 0) {
         if (channel == 15) {
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	ee cf       	rjmp	.-36     	; 0x356 <main+0x3e>

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
