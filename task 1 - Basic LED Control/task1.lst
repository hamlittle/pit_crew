
task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  000003ae  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005cb  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000158  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ff  00000000  00000000  000012d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000034  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001dd  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a4 30       	cpi	r26, 0x04	; 4
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
 220:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	2f e7       	ldi	r18, 0x7F	; 127
 22a:	8a e1       	ldi	r24, 0x1A	; 26
 22c:	96 e0       	ldi	r25, 0x06	; 6
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <delay+0x6>
 236:	00 c0       	rjmp	.+0      	; 0x238 <delay+0x10>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <main>:
   delay_ms(1000);
}

int main( void )
{
   LEDPORT.DIR = 0xff;    // Set all pins of port D to output.
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	80 93 80 06 	sts	0x0680, r24
   LEDPORT.OUT = 0xf0;    // Set upper four bits high.
 242:	90 ef       	ldi	r25, 0xF0	; 240
 244:	90 93 84 06 	sts	0x0684, r25
 248:	2f e7       	ldi	r18, 0x7F	; 127
 24a:	3a e1       	ldi	r19, 0x1A	; 26
 24c:	46 e0       	ldi	r20, 0x06	; 6
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	30 40       	sbci	r19, 0x00	; 0
 252:	40 40       	sbci	r20, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x12>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x1c>
 258:	00 00       	nop
   delay();
   LEDPORT.OUTSET = 0x0f; // Set lower four bits high, do not touch others.
 25a:	2f e0       	ldi	r18, 0x0F	; 15
 25c:	20 93 85 06 	sts	0x0685, r18
 260:	2f e7       	ldi	r18, 0x7F	; 127
 262:	3a e1       	ldi	r19, 0x1A	; 26
 264:	46 e0       	ldi	r20, 0x06	; 6
 266:	21 50       	subi	r18, 0x01	; 1
 268:	30 40       	sbci	r19, 0x00	; 0
 26a:	40 40       	sbci	r20, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x2a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x34>
 270:	00 00       	nop
   delay();
   LEDPORT.OUTCLR = 0xf0; // Clr upper four bits, do not touch others.
 272:	90 93 86 06 	sts	0x0686, r25
 276:	9f e7       	ldi	r25, 0x7F	; 127
 278:	2a e1       	ldi	r18, 0x1A	; 26
 27a:	36 e0       	ldi	r19, 0x06	; 6
 27c:	91 50       	subi	r25, 0x01	; 1
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	30 40       	sbci	r19, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x40>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x4a>
 286:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xff; // Toggle all pins, ones become zeros and vice versa.
 288:	80 93 87 06 	sts	0x0687, r24
 28c:	4f e7       	ldi	r20, 0x7F	; 127
 28e:	9a e1       	ldi	r25, 0x1A	; 26
 290:	26 e0       	ldi	r18, 0x06	; 6
 292:	41 50       	subi	r20, 0x01	; 1
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x56>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x60>
 29c:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xff; // Toggle all pins, ones become zeros and vice versa.
 29e:	80 93 87 06 	sts	0x0687, r24
 2a2:	3f e7       	ldi	r19, 0x7F	; 127
 2a4:	4a e1       	ldi	r20, 0x1A	; 26
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	31 50       	subi	r19, 0x01	; 1
 2aa:	40 40       	sbci	r20, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x6c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x76>
 2b2:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xAA; // Toggle some pins, ones become zeros and vice versa.
 2b4:	8a ea       	ldi	r24, 0xAA	; 170
 2b6:	80 93 87 06 	sts	0x0687, r24
 2ba:	9f e7       	ldi	r25, 0x7F	; 127
 2bc:	2a e1       	ldi	r18, 0x1A	; 26
 2be:	36 e0       	ldi	r19, 0x06	; 6
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	30 40       	sbci	r19, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x84>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x8e>
 2ca:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xAA; // Toggle some pins, ones become zeros and vice versa.
 2cc:	80 93 87 06 	sts	0x0687, r24
 2d0:	4f e7       	ldi	r20, 0x7F	; 127
 2d2:	9a e1       	ldi	r25, 0x1A	; 26
 2d4:	26 e0       	ldi	r18, 0x06	; 6
 2d6:	41 50       	subi	r20, 0x01	; 1
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x9a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0xa4>
 2e0:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xAA; // Toggle some pins, ones become zeros and vice versa.
 2e2:	80 93 87 06 	sts	0x0687, r24
 2e6:	3f e7       	ldi	r19, 0x7F	; 127
 2e8:	4a e1       	ldi	r20, 0x1A	; 26
 2ea:	96 e0       	ldi	r25, 0x06	; 6
 2ec:	31 50       	subi	r19, 0x01	; 1
 2ee:	40 40       	sbci	r20, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0xb0>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0xba>
 2f6:	00 00       	nop
   delay();
   LEDPORT.OUTTGL = 0xAA; // Toggle some pins, ones become zeros and vice versa.
 2f8:	80 93 87 06 	sts	0x0687, r24

   // Now, just for fun, we toggle all LEDs, again and again and again...
   while (1)
   {
      LEDPORT.OUTTGL = 0xff;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	80 93 87 06 	sts	0x0687, r24
 302:	2f e7       	ldi	r18, 0x7F	; 127
 304:	3a e1       	ldi	r19, 0x1A	; 26
 306:	46 e0       	ldi	r20, 0x06	; 6
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	30 40       	sbci	r19, 0x00	; 0
 30c:	40 40       	sbci	r20, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0xcc>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0xd6>
 312:	00 00       	nop
 314:	f4 cf       	rjmp	.-24     	; 0x2fe <main+0xc2>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
